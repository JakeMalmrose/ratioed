// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for AttachmentType.
const (
	Image AttachmentType = "image"
	Video AttachmentType = "video"
)

// Defines values for GetPostsParamsSort.
const (
	Asc  GetPostsParamsSort = "asc"
	Desc GetPostsParamsSort = "desc"
)

// Attachment defines model for Attachment.
type Attachment struct {
	// Src The URL source for the attachment
	Src string `json:"src"`

	// Type The type of attachment
	Type AttachmentType `json:"type"`
}

// AttachmentType The type of attachment
type AttachmentType string

// Content defines model for Content.
type Content struct {
	// Attachments The URLs of the post's attachments
	Attachments *[]Attachment `json:"attachments,omitempty"`

	// Body The body of the post. Required, but c
	Body string `db:"body" json:"body"`
}

// Post defines model for Post.
type Post struct {
	Content  Content `json:"content"`
	Dislikes int     `json:"dislikes"`

	// Id the id of the post
	Id    int `json:"id"`
	Likes int `json:"likes"`

	// ParentId the id of the parent of the post (if this field is not null, then the post is a comment)
	ParentId *int `db:"parent_id" json:"parent_id,omitempty"`

	// Pfp Author's pfp
	Pfp string `json:"pfp"`

	// Ratioed If this is true, the post should be displayed as a ratioed post (with no content, and locked with no more likes or dislikes)
	Ratioed bool `json:"ratioed"`

	// Timestamp A ISO8601 string that repreesents the exact time that the post was created (time is according to database)
	Timestamp time.Time `json:"timestamp"`

	// Username Author's username
	Username string `json:"username"`
}

// Posts An array of posts
type Posts = []Post

// NewPost defines model for NewPost.
type NewPost struct {
	Content Content `json:"content"`

	// Username Author's username
	Username string `json:"username"`
}

// GetPostsParams defines parameters for GetPosts.
type GetPostsParams struct {
	// Username Filter posts by author's username
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// Tag Filter posts by hashtag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Sort Sort posts by date (default desc)
	Sort *GetPostsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Page The page number to retreive (1-based index)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit The number of posts per page (max 100)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetPostsParamsSort defines parameters for GetPosts.
type GetPostsParamsSort string

// CreatePostJSONBody defines parameters for CreatePost.
type CreatePostJSONBody struct {
	Content Content `json:"content"`

	// Username Author's username
	Username string `json:"username"`
}

// CreatePostJSONRequestBody defines body for CreatePost for application/json ContentType.
type CreatePostJSONRequestBody CreatePostJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all posts
	// (GET /posts)
	GetPosts(ctx echo.Context, params GetPostsParams) error
	// Create a new post
	// (POST /posts)
	CreatePost(ctx echo.Context) error
	// Delete a post by ID
	// (DELETE /posts/{postId})
	DeletePostById(ctx echo.Context, postId string) error
	// Get a specific post by ID
	// (GET /posts/{postId})
	GetPostById(ctx echo.Context, postId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetPosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams
	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPosts(ctx, params)
	return err
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePost(ctx)
	return err
}

// DeletePostById converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postId" -------------
	var postId string

	err = runtime.BindStyledParameterWithOptions("simple", "postId", ctx.Param("postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePostById(ctx, postId)
	return err
}

// GetPostById converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postId" -------------
	var postId string

	err = runtime.BindStyledParameterWithOptions("simple", "postId", ctx.Param("postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPostById(ctx, postId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/posts", wrapper.GetPosts)
	router.POST(baseURL+"/posts", wrapper.CreatePost)
	router.DELETE(baseURL+"/posts/:postId", wrapper.DeletePostById)
	router.GET(baseURL+"/posts/:postId", wrapper.GetPostById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXUW/bNhD+KwduQFNAju21GAa/pSk2GBi2oO2eimKgxbPNViJZ8pREKPzfhyMlS7ak",
	"Jlm7PUUmebz7vrv7ePkicls6a9BQEKsvwuPnCgO9skpjXPgD725sIP7MrSE08VM6V+hckrZm/jFYw2sh",
	"32Mp+ct569BTc0PP7EePW7ESP8w7p/NkFubXzbFDJqqA3sgS2URhyL127EmsxFVFe+ufBTgeyQTVDsVK",
	"BPLa7MThkEUQ2qMSq/eid7AN5MPRxm4+Yk7icGpEvkJeaSLjKK6IZL4vGxin+ILPh4G+2yP89eZ3CLby",
	"OcLWeqA9guzuGQTeLoxdxTtgt6f2aKqSIepS7hjfrVZoe+gmGIm7WQx7yEQmrrt0neLsfIdJvIGDZKDO",
	"BnoWoG+TCU1YhofqoEf1kRIhvZc1/95YVY97552+90t404DOYFMR5APGM3E/s9LpWW4V7tDM8J68nJHc",
	"JYAbsUr+DucUxtUx8tpW+dYOUDoU+lOyLrXRJWd6cXSoDeEOPZ/UakgHU6BVnwwxZvpID056NPT3IxzF",
	"g323cKH5hw6w1Vgo0AGMJTBVUWR8yHQndQAJuS058c+H4T4mV12gnC+3dV/RD94d6UDPkoYjSNcNDh2A",
	"5SHrAg97WxUKNghKB1fIGhVIBtPc1RBxp2kPxkJTCxlIo6Cw+SdU0O6V1iPErID10NZAj42NtQVKExtD",
	"lxhIlmMgYf32z19+XiwhAQPaSwKPziMGrrgYPN7LnICvSftHQHcyQO5REiq4iPucmzy3XsXLLChJciMD",
	"cmRb60tJYiWUJJzx8TFev6eiayWyvqynVLY91uWwLfBeN/Vpm2rfEXG7MhAFiEvbxSOP1LIoBwMVY0Da",
	"bC1bk6aCt6JnuLpZs46jD8nx8nJxueALrEMjnRYr8eJycfmCUUvaR/9z1wa9wygxrDzxZV4rsRK/Id00",
	"ITvpZYmEPojV+3OMv+qC0Cd4sKlBjuRF88HPFfpaZCKls5+IbgAYJPAhb3sZ9iR3Ez7SzhOuf2s9dZdz",
	"ZcKFwq2sCgI++XzCUbCeTjy1T6wM/Hyw6ej7OvYeOblDMFW5Qc8945E86luEi+WMe0eBNgrvpyJx6Unv",
	"Ijlq9HKo0eMBNL7bmgXHhHNQF6W8h+ViMeW70KWmMcI7hx+4JYOzJqQX5KfF4kkT4jd2z7neFTpQ15xx",
	"dqvKUvo6NQDIomj3MuGaN/q0T66j4t2kt7KbguupIE8G5Xk7JR8GvCyfxMvDdAzh8/pRsEOV5xjCtiqK",
	"+oyIhBAkGLxLQwHvJ/mYf+E/a3VI4lcg4ZCi13Gd3b2q1+ohQeESXL8+mQb46Uh3N4XHItar+RiCOB/F",
	"v9b5wzp8OZTvSFByfE5QJl5OWvCksrWVUWc8JhpAJkybGtav+aKvqe+/54tlQ+Ptf8nY4rtWaBgr0XfH",
	"2YInHca307doGuaenoLY0xAc5nqr85NEDEt63kyVYTI9182BJk0tP/8rPW2Qx38Vp/gaFbcT6zNm2OM/",
	"AQAA//+QKAA85w8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

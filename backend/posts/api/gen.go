// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for AttachmentType.
const (
	Image AttachmentType = "image"
	Video AttachmentType = "video"
)

// Defines values for GetPostsParamsSort.
const (
	Asc  GetPostsParamsSort = "asc"
	Desc GetPostsParamsSort = "desc"
)

// Attachment defines model for Attachment.
type Attachment struct {
	// Src The URL source for the attachment
	Src string `json:"src"`

	// Type The type of attachment
	Type AttachmentType `json:"type"`
}

// AttachmentType The type of attachment
type AttachmentType string

// Content defines model for Content.
type Content struct {
	// Attachments The URLs of the post's attachments
	Attachments *[]Attachment `json:"attachments,omitempty"`

	// Body The body of the post. Required, but c
	Body string `json:"body"`
}

// Post defines model for Post.
type Post struct {
	Content  Content `json:"content"`
	Dislikes int     `json:"dislikes"`
	Likes    int     `json:"likes"`

	// Pfp Author's pfp
	Pfp string `json:"pfp"`

	// Username Author's username
	Username string `json:"username"`
}

// NewPost defines model for NewPost.
type NewPost struct {
	Content Content `json:"content"`

	// Username Author's username
	Username string `json:"username"`
}

// GetPostsParams defines parameters for GetPosts.
type GetPostsParams struct {
	// Author Filter posts by author
	Author *string `form:"author,omitempty" json:"author,omitempty"`

	// Tag Filter posts by tag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Sort Sort posts by date
	Sort *GetPostsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Page The page number to retreive (1-based index)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit The number of posts per page (max 100)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetPostsParamsSort defines parameters for GetPosts.
type GetPostsParamsSort string

// CreatePostJSONBody defines parameters for CreatePost.
type CreatePostJSONBody struct {
	Content Content `json:"content"`

	// Username Author's username
	Username string `json:"username"`
}

// CreatePostJSONRequestBody defines body for CreatePost for application/json ContentType.
type CreatePostJSONRequestBody CreatePostJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all posts
	// (GET /posts)
	GetPosts(ctx echo.Context, params GetPostsParams) error
	// Create a new post
	// (POST /posts)
	CreatePost(ctx echo.Context) error
	// Delete a post by ID
	// (DELETE /posts/{postId})
	DeletePostById(ctx echo.Context, postId string) error
	// Get a specific post by ID
	// (GET /posts/{postId})
	GetPostById(ctx echo.Context, postId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetPosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams
	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", ctx.QueryParams(), &params.Author)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter author: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPosts(ctx, params)
	return err
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePost(ctx)
	return err
}

// DeletePostById converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postId" -------------
	var postId string

	err = runtime.BindStyledParameterWithOptions("simple", "postId", ctx.Param("postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePostById(ctx, postId)
	return err
}

// GetPostById converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postId" -------------
	var postId string

	err = runtime.BindStyledParameterWithOptions("simple", "postId", ctx.Param("postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPostById(ctx, postId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/posts", wrapper.GetPosts)
	router.POST(baseURL+"/posts", wrapper.CreatePost)
	router.DELETE(baseURL+"/posts/:postId", wrapper.DeletePostById)
	router.GET(baseURL+"/posts/:postId", wrapper.GetPostById)

}

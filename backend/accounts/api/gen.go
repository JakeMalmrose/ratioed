// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Account defines model for Account.
type Account struct {
	// Bio Bio of the account
	Bio string `json:"bio"`

	// Email Email of the account
	Email string `json:"email"`

	// Id Unique identifier for the account (UUID)
	Id *string `json:"id,omitempty"`

	// Pfp Uri for a pfp for the account
	Pfp string `json:"pfp"`

	// Username Username of the account
	Username string `json:"username"`
}

// Accounts defines model for Accounts.
type Accounts = []Account

// AccountIdParam defines model for AccountIdParam.
type AccountIdParam = int

// NewAccount defines model for NewAccount.
type NewAccount struct {
	// Bio Bio of the account
	Bio *string `json:"bio,omitempty"`

	// Email Email of the account
	Email string `json:"email"`

	// Pfp Uri for a pfp for the account
	Pfp *string `json:"pfp,omitempty"`

	// Username Username of the account
	Username string `json:"username"`
}

// UpdateAccount defines model for UpdateAccount.
type UpdateAccount struct {
	// Bio Bio of the account
	Bio *string `json:"bio,omitempty"`

	// Pfp Uri for a pfp for the account
	Pfp *string `json:"pfp,omitempty"`

	// Username Username of the account
	Username *string `json:"username,omitempty"`
}

// GetAccountsParams defines parameters for GetAccounts.
type GetAccountsParams struct {
	// Username A string used to perform partial matching on a username. For example, jac would match bojack, jack, jac, ajac, etc. Case sensitive
	Username *string `form:"username,omitempty" json:"username,omitempty"`
}

// CreateAccountJSONBody defines parameters for CreateAccount.
type CreateAccountJSONBody struct {
	// Bio Bio of the account
	Bio *string `json:"bio,omitempty"`

	// Email Email of the account
	Email string `json:"email"`

	// Pfp Uri for a pfp for the account
	Pfp *string `json:"pfp,omitempty"`

	// Username Username of the account
	Username string `json:"username"`
}

// UpdateAccountByIdJSONBody defines parameters for UpdateAccountById.
type UpdateAccountByIdJSONBody struct {
	// Bio Bio of the account
	Bio *string `json:"bio,omitempty"`

	// Pfp Uri for a pfp for the account
	Pfp *string `json:"pfp,omitempty"`

	// Username Username of the account
	Username *string `json:"username,omitempty"`
}

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody CreateAccountJSONBody

// UpdateAccountByIdJSONRequestBody defines body for UpdateAccountById for application/json ContentType.
type UpdateAccountByIdJSONRequestBody UpdateAccountByIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all accounts
	// (GET /accounts)
	GetAccounts(ctx echo.Context, params GetAccountsParams) error
	// Create a new account
	// (POST /accounts)
	CreateAccount(ctx echo.Context) error
	// Delete an account
	// (DELETE /accounts/{accountId})
	DeleteAccountById(ctx echo.Context, accountId AccountIdParam) error
	// Get a single account
	// (GET /accounts/{accountId})
	GetAccountById(ctx echo.Context, accountId AccountIdParam) error
	// Update an account
	// (PATCH /accounts/{accountId})
	UpdateAccountById(ctx echo.Context, accountId AccountIdParam) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccountsParams
	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccounts(ctx, params)
	return err
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// DeleteAccountById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAccountById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "accountId" -------------
	var accountId AccountIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", ctx.Param("accountId"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAccountById(ctx, accountId)
	return err
}

// GetAccountById converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "accountId" -------------
	var accountId AccountIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", ctx.Param("accountId"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccountById(ctx, accountId)
	return err
}

// UpdateAccountById converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAccountById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "accountId" -------------
	var accountId AccountIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "accountId", ctx.Param("accountId"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAccountById(ctx, accountId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/accounts", wrapper.GetAccounts)
	router.POST(baseURL+"/accounts", wrapper.CreateAccount)
	router.DELETE(baseURL+"/accounts/:accountId", wrapper.DeleteAccountById)
	router.GET(baseURL+"/accounts/:accountId", wrapper.GetAccountById)
	router.PATCH(baseURL+"/accounts/:accountId", wrapper.UpdateAccountById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RW32/cNgz+VwitD01g+K5Ln+5pSbsO2UNRbA320HYAI9NnZbakSHSzW+D/fZDkX3e+",
	"LuvQLujLwZZJHvl9H0ndC2kaazRp9mJzLyw6bIjJxbdzKU2r+bJ4E47DSUFeOmVZGS024m1FoAowJXBF",
	"gMka2IAlVxrXAGowlhwGezBaZEIFP4tciUxobEhsBA7/IjLh6LZVjgqxYddSJrysqMHwz7yzwVhppi05",
	"0XVdsibPF6ZQFBN+TXd9zuFNGs2UHtHaWsmYx+rGh+TvZ7GtC1lyH+RamWWpF8oc1CmyISfPTumt6DJB",
	"Dap66fxjOF66W2QmFwx+z09/yE/fv8/z0yfH4trSLqNeOQWlcYBgSxufHsiu9eQS5otQ/ZcHS+zmFL3r",
	"651F/jB6mOsbkjzxNLHaZeLKFsj0qFT9J0iDqJHFRrROfT2EH0awGzpj3qbfhJJVcQQbrW7bMElIsyoV",
	"uUPk4enV1eXLk2+Mxn9slCySk/JfNk02cBppVExNfHjiqBQb8d1qGtqrXgerQQSTftA53MVMPMnWKd79",
	"Gmx7aRA6cuctV9PbqwGWn397K3qFhUDp61RjxWyTLJUuo8JYcR2+/BLalgoYsofzN5ciEx/J+YTfs3yd",
	"r0OOxpJGq8RGnOXr/CxpqIqprXBW+5airsctclmIjfiJeMQn29tZ7w4JO4fECLSeivlqsuhYYQ0NsqyC",
	"gdGAMPCTwyvjgP7ExtaUwQ1KuDNtXSRzuDY3KP+I5+k3A4y/xDKHF+gJPGmvWH2kYendtuR209abKWGx",
	"5EYRfQgq8tZon1j7fr3+rGn5LwTjE5OHqNXKcxD5wAVwhdxXH4Qfq4EZ9FFnbdOg2yWGAOt6dI+tavwR",
	"Ll84mq2C+U7ffaqCvbW/mu38bgHXsy8N1zG0wjVIxjKKcSDsw5GKBARNd3smo9ZX9+M1qEtjpyamJVwv",
	"43mfzMUuXpoOGuBYFZPJ6uBSd0Rjz5dzr3cC30pJ3pdtXe8g5VgE2J8npA/nOrZchaEuIzZPtWGozXZL",
	"BSh9kvzOPuVnnPprcAqKk8Y5kjzAd3IAcQIm3DhxUsMD0+Mr4bf+v0Q3rMc7xakrx2GmelaOUPnaMJSm",
	"1cWxlgWv9LamOYY2xFyiuHeF+3JAfmbz718ku8ejoo2JFHPgHr8nEjp7PdF13d8BAAD//0MIaCL0DQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
